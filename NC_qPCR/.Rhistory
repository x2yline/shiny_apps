y = data1$od
# par(family='Sans SimHei')
# 做散点图，并把坐标轴隐藏，
plot(x, y, pch=16, xlab="浓度 (pg/ml)", ylab="490nm吸光度", bty="n",
xlim=c(min(x), max(x))+c(0, 0.2)*(max(x)-min(x))/5,
ylim=c(min(y), max(y))+c(0, 0.2)*(max(y)-min(y))/5,
main="ELISA标准曲线图", axes=FALSE)
# 自定义坐标轴，at为坐标点位置，labels默认为坐标点的数值
# tck表示坐标刻度长度，pos表示坐标轴的位置
axis(2, at=round(seq(0, max(y), length=7), 2), las=2, tck=0.01, pos=0)
axis(1, at=round(seq(0, max(x), length=6), 2), las=1, tck=0.01, pos=0)
# clip限制当前作图区域的界限
clip(-2, 120, -1, 1)
# 坐标轴加箭头
arrows(100, 0, 105, 0, length=0.1)
arrows(0, max(y), 0, max(y)+0.1, length=0.1)
# 作拟合直线
clip(min(x), max(x), min(y), max(y)+(max(y)-min(y))/6)
abline(line.model, lwd=2, col="red")
# 标注直线方程和拟合系数
text(x=quantile(x, 0.85), y=quantile(y, .45),
labels=paste("y = ",
round(line.model$coefficients, 5),"x\nR2=",
round(summary(line.model)$r.squared, 4), sep="")
)
# 标注样本点
absorb_target = data_norm[length(data_norm)]
conc_target <- absorb_target/line.model$coefficients
points(conc_target, absorb_target, pch=16, col="blue", cex=1.3)
clip(0, conc_target, 0, absorb_target)
abline(h=absorb_target, lty=2)
clip(0, conc_target+1, 0, absorb_target)
abline(v=conc_target, lty=2)
# 标注样本点坐标值
clip(min(x), max(x), min(y), max(y)+(max(y)-min(y))/6)
text(conc_target+16, absorb_target,
paste("(", round(conc_target, 3), ", ",  round(absorb_target, 3), ")", sep=""))
# dev.off()
# Cairo::CairoPDF("ELISA.pdf",family="SimSun", width=7, height=5)
Cairo::CairoPNG("ELISA.png",family="SimSun", width=1400, height=1000, res=200)
# raw data each data has been replicated measured twice
# the last row is the meaure of sample
raw_data1 <- c(0.053, 0.057,
0.366, 0.315,
0.677, 0.679,
0.764, 0.792,
1.008, 0.824,
0.588, 0.326)
# clean data
data_norm1 <- raw_data1[seq(1, 11, 2)]
data_norm2 <- raw_data1[seq(2, 12, 2)]
data_norm <- (data_norm1+data_norm2)/2
data_norm <- data_norm -data_norm[1]
data1 <- data.frame(conc=c(0, 12.5, 25, 50, 100), od=data_norm[-length(data_norm)])
# line model fit (the model is y=b*x)
line.model <- lm(od~0+conc, data=data1)
# rsquared
summary(line.model)$r.squared
# f statistic
f <- summary(line.model)$fstatistic
# pvalue
pf(f[1], f[2], f[3], lower.tail=F)
# the data to be fitted renamed to x and y
x = data1$conc
y = data1$od
# par(family='Sans SimHei')
# 做散点图，并把坐标轴隐藏，
plot(x, y, pch=16, xlab="浓度 (pg/ml)", ylab="490nm吸光度", bty="n",
xlim=c(min(x), max(x))+c(0, 0.2)*(max(x)-min(x))/5,
ylim=c(min(y), max(y))+c(0, 0.2)*(max(y)-min(y))/5,
main="ELISA标准曲线图", axes=FALSE)
# 自定义坐标轴，at为坐标点位置，labels默认为坐标点的数值
# tck表示坐标刻度长度，pos表示坐标轴的位置
axis(2, at=round(seq(0, max(y), length=7), 2), las=2, tck=0.01, pos=0)
axis(1, at=round(seq(0, max(x), length=6), 2), las=1, tck=0.01, pos=0)
# clip限制当前作图区域的界限
clip(-2, 120, -1, 1)
# 坐标轴加箭头
arrows(100, 0, 105, 0, length=0.1)
arrows(0, max(y), 0, max(y)+0.1, length=0.1)
# 作拟合直线
clip(min(x), max(x), min(y), max(y)+(max(y)-min(y))/6)
abline(line.model, lwd=2, col="red")
# 标注直线方程和拟合系数
text(x=quantile(x, 0.85), y=quantile(y, .45),
labels=paste("y = ",
round(line.model$coefficients, 5),"x\nR2=",
round(summary(line.model)$r.squared, 4), sep="")
)
# 标注样本点
absorb_target = data_norm[length(data_norm)]
conc_target <- absorb_target/line.model$coefficients
points(conc_target, absorb_target, pch=16, col="blue", cex=1.3)
clip(0, conc_target, 0, absorb_target)
abline(h=absorb_target, lty=2)
clip(0, conc_target+1, 0, absorb_target)
abline(v=conc_target, lty=2)
# 标注样本点坐标值
clip(min(x), max(x), min(y), max(y)+(max(y)-min(y))/6)
text(conc_target+16, absorb_target,
paste("(", round(conc_target, 3), ", ",  round(absorb_target, 3), ")", sep=""))
# dev.off()
dev.off()
# Cairo::CairoPDF("ELISA.pdf", width=7, height=5)
Cairo::CairoPNG("ELISA.png", width=1400, height=1000, res=200)
# raw data each data has been replicated measured twice
# the last row is the meaure of sample
raw_data1 <- c(0.053, 0.057,
0.366, 0.315,
0.677, 0.679,
0.764, 0.792,
1.008, 0.824,
0.588, 0.326)
# clean data
data_norm1 <- raw_data1[seq(1, 11, 2)]
data_norm2 <- raw_data1[seq(2, 12, 2)]
data_norm <- (data_norm1+data_norm2)/2
data_norm <- data_norm -data_norm[1]
data1 <- data.frame(conc=c(0, 12.5, 25, 50, 100), od=data_norm[-length(data_norm)])
# line model fit (the model is y=b*x)
line.model <- lm(od~0+conc, data=data1)
# rsquared
summary(line.model)$r.squared
# f statistic
f <- summary(line.model)$fstatistic
# pvalue
pf(f[1], f[2], f[3], lower.tail=F)
# the data to be fitted renamed to x and y
x = data1$conc
y = data1$od
# par(family='Sans SimHei')
# 做散点图，并把坐标轴隐藏，
plot(x, y, pch=16, xlab="concentration (pg/ml)", ylab="490nm absorption", bty="n",
xlim=c(min(x), max(x))+c(0, 0.2)*(max(x)-min(x))/5,
ylim=c(min(y), max(y))+c(0, 0.2)*(max(y)-min(y))/5,
main="ELISA line model graphic", axes=FALSE)
# 自定义坐标轴，at为坐标点位置，labels默认为坐标点的数值
# tck表示坐标刻度长度，pos表示坐标轴的位置
axis(2, at=round(seq(0, max(y), length=7), 2), las=2, tck=0.01, pos=0)
axis(1, at=round(seq(0, max(x), length=6), 2), las=1, tck=0.01, pos=0)
# clip限制当前作图区域的界限
clip(-2, 120, -1, 1)
# 坐标轴加箭头
arrows(100, 0, 105, 0, length=0.1)
arrows(0, max(y), 0, max(y)+0.1, length=0.1)
# 作拟合直线
clip(min(x), max(x), min(y), max(y)+(max(y)-min(y))/6)
abline(line.model, lwd=2, col="red")
# 标注直线方程和拟合系数
text(x=quantile(x, 0.85), y=quantile(y, .45),
labels=paste("y = ",
round(line.model$coefficients, 5),"x\nR2=",
round(summary(line.model)$r.squared, 4), sep="")
)
# 标注样本点
absorb_target = data_norm[length(data_norm)]
conc_target <- absorb_target/line.model$coefficients
points(conc_target, absorb_target, pch=16, col="blue", cex=1.3)
clip(0, conc_target, 0, absorb_target)
abline(h=absorb_target, lty=2)
clip(0, conc_target+1, 0, absorb_target)
abline(v=conc_target, lty=2)
# 标注样本点坐标值
clip(min(x), max(x), min(y), max(y)+(max(y)-min(y))/6)
text(conc_target+16, absorb_target,
paste("(", round(conc_target, 3), ", ",  round(absorb_target, 3), ")", sep=""))
dev.off()
?lm
names(line.model)
x <- 1:10
y <- rnorm(10)
line.model <- lm(y~x)
names(line.model)
line.model$qr
line.model$fitted.values
line.model$coefficients
line.model$residuals
line.model$fitted.values
f <- summary(line.model)$fstatistic
# pvalue
pf(f[1], f[2], f[3], lower.tail=F)
predict(line.model, data.frame(x=c(0, 1, 2)))
summary(line.model)$r.squared
summary(line.model)$r.squared
summary(line.model)$adj.r.squared
q()
# Cairo::CairoPDF("ELISA.pdf", width=7, height=5)
Cairo::CairoPNG("ELISA.png", width=1400, height=1000, res=200)
# raw data each data has been replicated measured twice
# the last row is the meaure of sample
raw_data1 <- c(0.053, 0.057,
0.366, 0.315,
0.677, 0.679,
0.764, 0.792,
1.008, 0.824,
0.588, 0.326)
# clean data
data_norm1 <- raw_data1[seq(1, 11, 2)]
data_norm2 <- raw_data1[seq(2, 12, 2)]
data_norm <- (data_norm1+data_norm2)/2
data_norm <- data_norm -data_norm[1]
data1 <- data.frame(conc=c(0, 12.5, 25, 50, 100), od=data_norm[-length(data_norm)])
# line model fit (the model is y=b*x)
line.model <- lm(od~0+conc, data=data1)
# rsquared
summary(line.model)$r.squared
# f statistic
f <- summary(line.model)$fstatistic
# pvalue
pf(f[1], f[2], f[3], lower.tail=F)
# the data to be fitted renamed to x and y
x = data1$conc
y = data1$od
# par(family='Sans SimHei')
# 做散点图，并把坐标轴隐藏，
plot(x, y, pch=16, xlab="concentration (pg/ml)", ylab="490nm Optical Density", bty="n",
xlim=c(min(x), max(x))+c(0, 0.2)*(max(x)-min(x))/5,
ylim=c(min(y), max(y))+c(0, 0.2)*(max(y)-min(y))/5,
main="ELISA line model graphic", axes=FALSE)
# 自定义坐标轴，at为坐标点位置，labels默认为坐标点的数值
# tck表示坐标刻度长度，pos表示坐标轴的位置
axis(2, at=round(seq(0, max(y), length=7), 2), las=2, tck=0.01, pos=0)
axis(1, at=round(seq(0, max(x), length=6), 2), las=1, tck=0.01, pos=0)
# clip限制当前作图区域的界限
clip(-2, 120, -1, 1)
# 坐标轴加箭头
arrows(100, 0, 105, 0, length=0.1)
arrows(0, max(y), 0, max(y)+0.1, length=0.1)
# 作拟合直线
clip(min(x), max(x), min(y), max(y)+(max(y)-min(y))/6)
abline(line.model, lwd=2, col="red")
# 标注直线方程和拟合系数
text(x=quantile(x, 0.85), y=quantile(y, .45),
labels=paste("y = ",
round(line.model$coefficients, 5),"x\nR2=",
round(summary(line.model)$r.squared, 4), sep="")
)
# 标注样本点
absorb_target = data_norm[length(data_norm)]
conc_target <- absorb_target/line.model$coefficients
points(conc_target, absorb_target, pch=16, col="blue", cex=1.3)
clip(0, conc_target, 0, absorb_target)
abline(h=absorb_target, lty=2)
clip(0, conc_target+1, 0, absorb_target)
abline(v=conc_target, lty=2)
# 标注样本点坐标值
clip(min(x), max(x), min(y), max(y)+(max(y)-min(y))/6)
text(conc_target+16, absorb_target,
paste("(", round(conc_target, 3), ", ",  round(absorb_target, 3), ")", sep=""))
dev.off()
View(data1)
data.frame(pore_number=1:12,
reagent=rep(c(0, 12.5, 25, 50, 100, 37),each=2),
od=c(data_norm1, data_norm2))
write.csv(file="ELISA.csv", data_to_table, sep=",", row.names=FALSE)
write.csv(file="ELISA.csv", data_to_table, row.names=FALSE)
data_to_table <- data.frame(pore_number=1:12,
reagent=rep(c(0, 12.5, 25, 50, 100, 37),each=2),
od=c(data_norm1, data_norm2))
write.csv(file="ELISA.csv", data_to_table, row.names=FALSE)
data_to_table <- data.frame(pore_number=1:12,
reagent=rep(c(0, 12.5, 25, 50, 100, 37),each=2),
od=raw_data1)
write.csv(file="ELISA.csv", data_to_table, row.names=FALSE)
q()
# Cairo::CairoPDF("ELISA.pdf", width=7, height=5)
# Cairo::CairoPNG("ELISA.png", width=1400, height=1000, res=200)
# raw data each data has been replicated measured twice
# the last row is the meaure of sample
raw_data1 <- c(0.053, 0.057,
0.366, 0.315,
0.677, 0.679,
0.764, 0.792,
1.008, 0.824,
0.588, 0.326)
# clean data
data_norm1 <- raw_data1[seq(1, 11, 2)]
data_norm2 <- raw_data1[seq(2, 12, 2)]
data_norm <- (data_norm1+data_norm2)/2
data_norm <- data_norm -data_norm[1]
data1 <- data.frame(conc=c(0, 12.5, 25, 50, 100), od=data_norm[-length(data_norm)])
data_to_table <- data.frame(pore_number=1:12,
reagent=rep(c(0, 12.5, 25, 50, 100, 37),each=2),
od=raw_data1)
write.csv(file="ELISA.csv", data_to_table, row.names=FALSE)
# line model fit (the model is y=b*x)
line.model <- lm(od~0+conc, data=data1)
# rsquared
summary(line.model)$r.squared
# f statistic
f <- summary(line.model)$fstatistic
# pvalue
pf(f[1], f[2], f[3], lower.tail=F)
# the data to be fitted renamed to x and y
x = data1$conc
y = data1$od
# par(family='Sans SimHei')
# 做散点图，并把坐标轴隐藏，
plot(x, y, pch=16, xlab="concentration (pg/ml)", ylab="490nm Optical Density", bty="n",
xlim=c(min(x), max(x))+c(0, 0.2)*(max(x)-min(x))/5,
ylim=c(min(y), max(y))+c(0, 0.2)*(max(y)-min(y))/5,
main="ELISA line model graphic", axes=FALSE)
# 自定义坐标轴，at为坐标点位置，labels默认为坐标点的数值
# tck表示坐标刻度长度，pos表示坐标轴的位置
axis(2, at=round(seq(0, max(y), length=7), 2), las=2, tck=0.01, pos=0)
axis(1, at=round(seq(0, max(x), length=6), 2), las=1, tck=0.01, pos=0)
# clip限制当前作图区域的界限
clip(-2, 120, -1, 1)
# 坐标轴加箭头
arrows(100, 0, 105, 0, length=0.1)
arrows(0, max(y), 0, max(y)+0.1, length=0.1)
# 作拟合直线
clip(min(x), max(x), min(y), max(y)+(max(y)-min(y))/6)
abline(line.model, lwd=2, col="red")
# 标注直线方程和拟合系数
text(x=quantile(x, 0.85), y=quantile(y, .45),
labels=paste("y = ",
round(line.model$coefficients, 5),"x\nR2=",
round(summary(line.model)$r.squared, 4), sep="")
)
# 标注样本点
absorb_target = data_norm[length(data_norm)]
conc_target <- absorb_target/line.model$coefficients
points(conc_target, absorb_target, pch=16, col="blue", cex=1.3)
clip(0, conc_target, 0, absorb_target)
abline(h=absorb_target, lty=2)
clip(0, conc_target+1, 0, absorb_target)
abline(v=conc_target, lty=2)
# 标注样本点坐标值
clip(min(x), max(x), min(y), max(y)+(max(y)-min(y))/6)
text(conc_target+16, absorb_target,
paste("(", round(conc_target, 3), ", ",  round(absorb_target, 3), ")", sep=""))
# dev.off()
line.model2 <- lm(x~y)
syx <- sqrt(sum(line.model2$residuals^2)/(nrow(data1)-2))
lxx <- var(data1$x)*(nrow(data1)-1)
lxx <- var(x)*(nrow(data1)-1)
syx <- sqrt(sum(line.model2$residuals^2)/(nrow(data1)-2))
Sb <- syx/(sqrt(lxx))
line.model2 <- lm(x~y)
lxx <- var(y)*(nrow(data1)-1)
syx <- sqrt(sum(line.model2$residuals^2)/(nrow(data1)-2))
Sb <- syx/(sqrt(lxx))
Sb <- syx/(sqrt(lxx))
Sy02 <- syx*sqrt(1+1/nrow(data1)+
(y-mean(y))^2/
(var(y)*nrow(data1)-1))
Sy02 <- syx*sqrt(1+1/nrow(data1)+
(0.402-mean(y))^2/
(var(y)*nrow(data1)-1))
37.76-Sy02
37.76+Sy02
line.model2 <- lm(x~y)
lxx <- var(y)*(nrow(data1)-1)
syx <- sqrt(sum(line.model2$residuals^2)/(nrow(data1)-2))
Sb <- syx/(sqrt(lxx))
Sy02 <- syx*sqrt(1/nrow(data1)+
(0.402-mean(y))^2/
(var(y)*nrow(data1)-1))
ggplot2::ggplot(data1, aes(x, y))+ggplot2::geom_point()+ggplot2::geom_smooth(method="lm")
ggplot2::ggplot(data1, aes(x, y))+ggplot2::geom_point()+ggplot2::geom_smooth(aes(x,y), method="lm")
library(ggplot2)
ggplot2::ggplot(data1, aes(x, y))+ggplot2::geom_point()+ggplot2::geom_smooth(aes(x,y), method="lm")
37.76+Sy02
37.76-Sy02
q()
library("memisc")
data1 <- data.frame(as.data.set(spss.system.file('E:/医学统计学（第4版）/各章例题SPSS数据文件/例11-03.sav')))
View(data1)
data1 <- data.frame(as.data.set(spss.system.file('E:/医学统计学（第4版）/各章例题SPSS数据文件/例11-02.sav')))
View(data1)
data1 <- data.frame(as.data.set(spss.system.file('E:/医学统计学（第4版）/各章例题SPSS数据文件/例11-01.sav')))
View(data1)
data1 <- haven::read_sav(
"E:/医学统计学（第4版）/各章例题SPSS数据文件/例11-01.sav")
View(data1)
data1 <- haven::read_sav(
"E:/医学统计学（第4版）/各章例题SPSS数据文件/例11-03.sav")
View(data1)
head(group_df)
head(data1)
View(data1)
aov(x~a*b*c, data=data1)
summary(aov(x~a*b*c, data=data1))
data1$a <- factor(data1$a)
data1$b <- factor(data1$b)
data1$c <- factor(data1$c)
head(data1)
summary(aov(x~a*b*c, data=data1))
aov(x~a*b*c, data=data1)
q()
q()
q()
shiny::runApp('line_model')
runApp('line_model')
runApp('line_model')
runApp('line_model')
runApp('line_model')
runApp('line_model')
runApp('line_model')
runApp('line_model')
runApp('line_model')
runApp('line_model')
runApp('line_model')
runApp('line_model')
runApp('line_model')
runApp('line_model')
runApp('line_model')
library(shiny)
runExample("10_download")
runApp('line_model')
runApp('line_model')
plot(1:10)
shinyApp(ui = ui, server = server)
runApp('E:/r/shiny/pdf')
runApp('E:/r/shiny/pdf')
runApp('E:/r/shiny/pdf')
?uiou
?uiOutput
runApp('E:/r/shiny/pdf')
runApp('E:/r/shiny/pdf')
runApp('E:/r/shiny/pdf')
runApp('E:/r/shiny/pdf')
runApp('E:/r/shiny/PDF_extraction_shinyApp-master/PDF_extraction_shinyApp-master')
runApp('E:/r/shiny/pdf')
runApp('E:/r/shiny/pdf')
runApp('E:/r/shiny/pdf')
runApp('E:/r/shiny/pdf')
runApp('E:/r/shiny/pdf')
runApp('E:/r/shiny/pdf')
runApp('E:/r/shiny/pdf')
runApp('E:/r/shiny/pdf')
?tags
runApp('E:/r/shiny/pdf')
runApp('E:/r/shiny/pdf')
runApp('E:/r/shiny/pdf')
runApp('line_model')
runApp('line_model')
runApp('line_model')
runApp('line_model')
runApp('line_model')
runApp('line_model')
runApp('line_model')
runApp('line_model')
runApp('line_model')
runApp('line_model')
runApp('E:/r/shiny/pdf')
runApp('E:/r/shiny/pdf')
runApp('line_model')
runApp('line_model')
runApp('line_model')
runApp('line_model')
runApp('line_model')
runApp('line_model')
runApp('line_model')
runApp('line_model')
runApp('line_model')
runApp('line_model')
runApp('line_model')
runApp('line_model')
runApp('line_model')
runApp('line_model')
?pdf
runApp('line_model')
?Families
??Families
runApp('line_model')
font_families()
sysfonts::font_families()
runApp('line_model')
runApp('line_model')
runApp('line_model')
runApp('line_model')
require(Cairo)
runApp('line_model')
runApp('line_model')
runApp('line_model')
runApp('line_model')
runApp('line_model')
runApp('line_model')
runApp('line_model')
runApp('line_model')
runApp('line_model')
?pdf
?par
runApp('line_model')
runApp('line_model')
runApp('line_model')
runApp('line_model')
runApp('line_model')
runApp('line_model')
runApp('line_model')
runApp('line_model')
runApp('line_model')
runApp('line_model')
runApp('E:/r/shiny/shiny-examples-master/shiny-examples-master/022-unicode-chinese')
runApp('line_model')
runApp('line_model')
runApp('line_model')
runApp('line_model')
runApp('line_model')
setwd("E:\r\shiny\qpcr\NC_qPCR\lib")
setwd("E:\\r\\shiny\qpcr\\NC_qPCR\\lib")
setwd("E:\\r\\shiny\\qpcr\\NC_qPCR\\lib")
shiny::runApp('E:/r/shiny/qpcr/NC_qPCR')
runApp('E:/r/shiny/qpcr/NC_qPCR')
install.packages("plyr", lib = "./lib")
shiny::runApp()
install.packages("ggplot2", lib = "./lib")
shiny::runApp()
runApp()
runApp()
